amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.002
    alpha2: 0.002
    alpha3: 0.002
    alpha4: 0.002
    alpha5: 0.002
    base_frame_id: "base_link" # "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map" # "world"
    initial_pose: [0.0, 0.0, 0.0, 0.0]
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential" # ??
    save_pose_rate: 0.5
    set_initial_pose: False
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: /scan

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map # world
    robot_base_frame: base_link
    odom_topic: /odometry/filtered
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    odom_topic: "odom"
    map_frame: "map" # "world"
    use_sim_time: True
    controller_frequency: 5.0 # 2.0
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugin_types: ["teb_local_planner::TebLocalPlannerROS"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    general_goal_checker:
      stateful: False # True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1 # 0.25 WF 0.5
      yaw_goal_tolerance: 1.5 # 0.25 WF 2.0
      
    # TEB parameters
    FollowPath:
      plugin: teb_local_planner::TebLocalPlannerROS

      transform_tolerance: 1.0 # increase?

      teb_autosize: 1.0
      dt_ref: 1.0 # 0.3
      dt_hysteresis: 0.5 # 0.1
      max_samples: 500
      global_plan_overwrite_orientation: True
      allow_init_with_backwards_motion: False
      max_global_plan_lookahead_dist: 0.0 # 3.0 WF TODO
      global_plan_viapoint_sep: 0.3
      global_plan_prune_distance: 1.0
      exact_arc_length: False
      feasibility_check_no_poses: 2
      publish_feedback: True

      # Robot
      max_vel_x: 0.2
      max_vel_theta: 0.5
      acc_lim_x: 0.5
      acc_lim_theta: 1.5 # 3.2
      max_vel_x_backwards: 0.1

      footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
        type: "circular"
        radius: 0.09 # for type "circular"

      # GoalTolerance
      xy_goal_tolerance: 0.1
      yaw_goal_tolerance: 1.5     
      free_goal_vel: False

      # Obstacles
      min_obstacle_dist: 0.03240013
      inflation_dist: 0.066 # 0.6
      include_costmap_obstacles: True
      costmap_obstacles_behind_robot_dist: 0.03240013 # 0.12
      obstacle_poses_affected: 15

      dynamic_obstacle_inflation_dist: 0.066
      include_dynamic_obstacles: True 

      costmap_converter_plugin: "" # "costmap_converter::CostmapToPolygonsDBSMCCH"
      costmap_converter_spin_thread: True
      costmap_converter_rate: 5

      # Optimization
      no_inner_iterations: 5
      no_outer_iterations: 4
      optimization_activate: True
      optimization_verbose: False
      penalty_epsilon: 0.1
      obstacle_cost_exponent: 4.0
      weight_max_vel_x: 50.0 # TODO: more contribution from vels and acc
      weight_max_vel_theta: 50.0 # 0.5
      weight_acc_lim_x: 50.0
      weight_acc_lim_theta: 50.0 # 10.5
      weight_kinematics_nh: 1000.0 # 1000.0
      weight_kinematics_forward_drive: 20.0 # 3.0 WF
      weight_kinematics_turning_radius: 50.0
      weight_optimaltime: 1.0 # must be > 0
      weight_shortest_path: 0.0
      weight_obstacle: 50.0
      weight_inflation: 50.0
      weight_dynamic_obstacle: 10.0 # not in use yet
      weight_dynamic_obstacle_inflation: 0.2
      weight_viapoint: 50.0
      weight_adapt_factor: 2.0

      # Homotopy Class Planner
      enable_homotopy_class_planning: False # True WF
      enable_multithreading: True
      max_number_classes: 4
      selection_cost_hysteresis: 5.0
      selection_prefer_initial_plan: 1.0
      selection_obst_cost_scale: 100.0
      selection_alternative_time_cost: True

      roadmap_graph_no_samples: 15
      roadmap_graph_area_width: 5.0
      roadmap_graph_area_length_scale: 1.0
      h_signature_prescaler: 0.5
      h_signature_threshold: 0.1
      obstacle_heading_threshold: 0.45
      switching_blocking_period: 0.0
      viapoints_all_candidates: True
      delete_detours_backwards: True
      max_ratio_detours_duration_best_duration: 3.0
      visualize_hc_graph: False
      visualize_with_time_as_z_axis_scale: 0.0

      # Recovery
      shrink_horizon_backup: True
      shrink_horizon_min_duration: 10.0
      oscillation_recovery: True
      oscillation_v_eps: 0.1
      oscillation_omega_eps: 0.1
      oscillation_recovery_min_duration: 10.0
      oscillation_filter_duration: 10.0

      # plugin: "dwb_core::DWBLocalPlanner"

      # debug_trajectory_details: True
      # min_vel_x: 0.0
      # min_vel_y: 0.0
      # max_vel_x: 0.2 # 0.26 WF
      # max_vel_y: 0.0
      # max_vel_theta: 0.5
      # min_speed_xy: 0.0
      # max_speed_xy: 0.2 # 0.26 WF
      # min_speed_theta: 0.0
      # # Add high threshold velocity for turtlebot 3 issue.
      # # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      # acc_lim_x: 0.5 # 2.5
      # acc_lim_y: 0.0
      # acc_lim_theta: 2.5
      # decel_lim_x: -0.5 # -2.5
      # decel_lim_y: 0.0
      # decel_lim_theta: -2.5
      # max_vel_trans: 0.2
      # min_vel_trans: 0.02
      # vx_samples: 20
      # vy_samples: 5
      # vtheta_samples: 20
      # sim_time: 1.5
      # linear_granularity: 0.05
      # angular_granularity: 0.025
      # transform_tolerance: 0.2
      # xy_goal_tolerance: 0.1
      # trans_stopped_velocity: 0.25
      # short_circuit_trajectory_evaluation: True
      # stateful: True
      # critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      # BaseObstacle.scale: 0.02
      # PathAlign.scale: 32.0
      # PathAlign.forward_point_distance: 0.1
      # GoalAlign.scale: 24.0
      # GoalAlign.forward_point_distance: 0.1
      # PathDist.scale: 32.0
      # GoalDist.scale: 24.0
      # RotateToGoal.scale: 32.0
      # RotateToGoal.slowing_factor: 5.0
      # RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 10
      height: 10
      resolution: 0.05 # 0.05
      robot_radius: 0.09
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.09 # 0.55
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 9.5
          obstacle_min_range: 0.0
      static_layer:
        enabled: False
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map # world
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.09
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 9.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: False
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.09 # 0.95
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "/workspace/src/survey/map/map_1664700377.yaml"
    topic_name: "map"
    frame_id: "map" # "world"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 2.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      # plugin: "nav2_smac_planner/SmacPlanner2D"
      # tolerance: 0.125                      # tolerance for planning if unable to reach exact pose, in meters
      # downsample_costmap: false             # whether or not to downsample the map
      # downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      # allow_unknown: true                   # allow traveling in unknown space
      # max_iterations: 1000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      # max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
      # max_planning_time: 2.0                # max time in s for planner to plan, smooth
      # cost_travel_multiplier: 2.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      # use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      # smoother:
      #   max_iterations: 1000
      #   w_smooth: 0.3
      #   w_data: 0.2
      #   tolerance: 1e-10

      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
      backup_speed: 0.12
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: True
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True
    
waypoint_follower:
  ros__parameters:
    loop_rate: 2
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200
    